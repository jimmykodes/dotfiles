#!/usr/bin/env python3

import argparse
import os
import subprocess


VALID_SCHEMES = {
    "deep_purple",
    "system76",
    "onedark",
}


def config_dir() -> str:
    return os.getenv("XDG_CONFIG_HOME", "~/.config")


def color_file() -> str:
    return config_dir()+"/color"


def get_scheme() -> str:
    with open(color_file()) as f:
        return f.read()


def k9s(scheme: str):
    cmd = [
        'yq',
        f'.k9s.ui.skin="{scheme}"',
        config_dir()+'/k9s/config.yaml',
        '-i',
    ]
    subprocess.run(cmd)


# TODO: this is gross... remove hard coding path and make the osascript more legible
def bg(scheme: str):
    # run a bash command using subprocess
    home = os.getenv("HOME")
    subprocess.run([
        "osascript",
        "-e",
        f'tell application "Finder"\nset desktop picture to POSIX file "{
            home}/Library/Mobile Documents/com~apple~CloudDocs/Images/bg/{scheme}.png"\nend tell'
    ])


def main(scheme: str):
    if scheme not in VALID_SCHEMES:
        print(f"invalid scheme '{scheme}'. options are {VALID_SCHEMES}")
    with open(color_file(), "w") as f:
        f.write(scheme)
    bg(scheme)
    k9s(scheme)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--all", action="store_true")
    parser.add_argument("--show", action="store_true")
    parser.add_argument("set", nargs='?', default=None)

    args = parser.parse_args()

    if args.all:
        for s in VALID_SCHEMES:
            print(s)
    elif args.show or not args.set:
        print(get_scheme())
    else:
        main(args.set)
